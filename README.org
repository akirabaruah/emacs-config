* Controls

** General

Simplify key bindings.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup))
#+end_src

** Evil

Use Vim keybindings to avoid Repetitive Strain Injury (RSI).

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :demand t
  :requires general
  :general
  (:states '(normal visual emacs)
    "SPC" 'hydra-leader/body)
  :init
  (setq evil-want-C-i-jump nil)  ;; C-i is also <tab>; don't use it for evil.
  (setq evil-want-keybinding nil)  ;; Use evil-collection for bindings
                                   ;; in other packages.
  ;; For some reason, Magit's git-commit-mode defaults to emacs state instead of
  ;; normal or insert states. The with-editor-mode-hook below ensures that we
  ;; start that mode with insert instead of emacs state. See
  ;; https://github.com/emacs-evil/evil/issues/1145 and
  ;; https://emacs.stackexchange.com/questions/14008/default-magit-commit-state-in-evil.
  :hook ((with-editor-mode . evil-insert-state)
         (after-init . evil-mode)))
#+end_src

*** Evil Collection

Common Evil keybindings for other modes. Don't initialize the whole
package here; instead setup various components within the requiring
~use-package~ definition. See
https://github.com/emacs-evil/evil-collection.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :requires evil
  :init
  ;; See evil-collection-mode-list definition in
  ;; https://github.com/emacs-evil/evil-collection/blob/master/evil-collection.el
  ;; for available modes and how to add them below.
  (evil-collection-init
    '((buff-menu "buff-menu")
      dired
      magit
      (package-menu package))))
#+end_src

#+RESULTS:

** Hydra

Hydras are configurable key command menus.

#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src

** Which Key

See https://github.com/justbur/emacs-which-key.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :hook (after-init . which-key-mode))
#+end_src

** Magit

Git interface. See https://github.com/magit/magit.

#+begin_src emacs-lisp
(use-package magit :ensure t)
#+end_src

Enable Evil keybindings for Magit. See https://github.com/emacs-evil/evil-magit.

#+begin_src emacs-lisp
(use-package evil-magit
  :requires (evil magit)
  :ensure t)
#+end_src

* Hydra Menus

Definitions for Hydra menus. Requires the ~hydra~ package installed above.

** Leader Menu

First, create a top-level menu launched by the leader key.

#+begin_src emacs-lisp
(defhydra hydra-leader (:color blue) "
Leader Hydra
"
  ("f" hydra-file/body "file")
  ("b" hydra-buffer/body "buffer")
  ("w" hydra-window/body "window")
  ("g" magit-status "magit")
  ("E" hydra-editor/body "editor")
  ("Q" save-buffers-kill-emacs "quit emacs")
  ("SPC" nil "cancel"))
#+end_src

** File

Basic file navigation.

#+begin_src emacs-lisp
(defhydra hydra-file (:color blue :hint nil) "
File Hydra
"
  ("e" load-file "load elisp")
  ("f" find-file "find")
  ("s" save-buffer "save"))
#+end_src

** Buffer

Buffer manipulation.

#+begin_src emacs-lisp
(defhydra hydra-buffer (:color blue) "
Buffer Hydra
"
  ("b" switch-to-buffer "switch to buffer")
  ("r" revert-buffer-no-confirm "reload buffer contents")
  ("SPC" nil "cancel"))
#+end_src

Custom buffer functions used above.

#+begin_src emacs-lisp
;; See https://www.emacswiki.org/emacs/RevertBuffer#toc1.
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src

** Window

Window manipulation.

#+begin_src emacs-lisp
(defhydra hydra-window (:hint nil) "
Window Hydra
^Movement^  ^Manipulation^
^--------^  ^------------^---------
_j_: down   _-_: split vertically
_k_: up     _/_: split horizontally
_h_: left   _c_: close window
_l_: right
"
  ("j" evil-window-down)
  ("k" evil-window-up)
  ("h" evil-window-left)
  ("l" evil-window-right)
  ("-" split-window-vertically)
  ("/" split-window-horizontally)
  ("c" delete-window)
  ("SPC" nil "cancel" :color blue))
#+end_src

** Editor

Editor configuration.

#+begin_src emacs-lisp
(defhydra hydra-editor (:color blue :hint nil) "
Emacs Hydra
"
  ("r" load-editor-init "reload init file")
  ("i" find-editor-init "open init file")
  ("o" find-editor-config "open config")
  ("SPC" nil "cancel" :color blue))
#+end_src

Define custom functions for editor init and config files used above.

#+begin_src emacs-lisp
(defun load-editor-init ()
  "Load editor initialization file."
  (interactive)
  (load-file user-init-file))

(defun find-editor-init ()
  "Open the editor initialization file for modification."
  (interactive)
  (find-file user-init-file))

(defun find-editor-config ()
  "Open the editor config file for modification."
  (interactive)
  (find-file user-config-file))
#+end_src
* Display
** Column Numbers

Show column numbers.

#+begin_src emacs-lisp
(setq-default column-number-mode t)
#+end_src

** Line Numbers

Show line numbers. See https://www.emacswiki.org/emacs/LineNumbers.

#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode)
  ;; https://github.com/coldnew/linum-relative#backends
  (setq linum-relative-backend 'display-line-numbers-mode))
#+end_src
** Linum Relative

#+begin_src emacs-lisp :tangle no
(use-package linum-relative
  :ensure t
  :hook (after-init . linum-relative-mode))
#+end_src

** Centered Cursor Mode

#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :ensure t
  :hook (after-init . global-centered-cursor-mode))
#+end_src

** Diff HL

Highlights uncomitted changes for various VC backends. See
https://github.com/dgutov/diff-hl.

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :config
  (unless (display-graphic-p) (diff-hl-margin-mode))
  :hook (after-init . global-diff-hl-mode))
#+end_src

** Helpful

See https://github.com/Wilfred/helpful.

#+begin_src emacs-lisp
(use-package helpful)
#+end_src

* Content

** Files

*** Backup Files

Save backups of open files to /tmp (or equivalent) directory.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

*** Custom File

Put custom autogenerated settings in a separate file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+end_src

*** Clean Up

Delete trailing whitespace on save.

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Editing

*** Column Width

Use up to 80 characters per line by default.

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

Automatically wrap blocks of text.

#+begin_src emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
#+end_src

* Intelligence

** Company

"COMPlete ANYthing" framework for text completion. See
https://company-mode.github.io/.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :requires evil-collection
  :custom
  (evil-collection-company-use-tng nil "Disable company-tng frontend")
  :init
  (setq company-idle-delay 0)
  (evil-collection-company-setup)
  :config
  (add-to-list 'company-backends 'company-ispell)
  (add-to-list 'company-backends 'company-yasnippet)
  :hook (after-init . global-company-mode))
#+end_src

** Flycheck

On-the-fly syntax checking. See https://github.com/flycheck/flycheck.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :hook (after-init . global-flycheck-mode))
#+end_src

** YASnippet

Reusable text snippets. See https://github.com/joaotavora/yasnippet.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  :hook (after-init . yas-global-mode))
#+end_src

Yasnippet doesn't include snippets out of the box, so include the
official package of pre-written snippets. See
https://github.com/AndreaCrotti/yasnippet-snippets.

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t
  :requires yasnippet)
#+end_src

* Theme
** Doom Themes

Cool themes from https://github.com/hlissner/emacs-doom-themes.

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

** Doom Modeline

See https://github.com/seagle0128/doom-modeline.

#+begin_src emacs-lisp :tangle no
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src

** All the Icons

Nice fonts used by Doom packages. For example, see
https://github.com/jacktasia/beautiful-emacs/blob/master/init.org.

#+begin_src emacs-lisp
(use-package all-the-icons
  :if window-system
  :ensure t
  :config
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))
#+end_src
* Languages

** LSP Mode

Language Server Protocol integration. See https://github.com/emacs-lsp/lsp-mode.

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook (c++-mode . lsp-deferred)
  :init
  (setq
    company-clang-insert-arguments nil
    company-semantic-insert-arguments nil
    company-rtags-insert-arguments nil
    lsp-enable-snippet nil)
  :commands lsp lsp-deferred)
#+end_src

** CC Mode

Configs for the C/C++ mode included in Emacs.

#+begin_src emacs-lisp
(use-package cc-mode
  :ensure t
  :mode (("\\.h\\'" . c++-mode)))
#+end_src

** Google C Style

Google style formatting for C/C++ modes.

#+begin_src emacs-lisp
(use-package google-c-style
  :ensure t
  :init
  (add-hook 'c-mode-common-hook
            (lambda ()
              (google-set-c-style)
              (google-make-newline-indent))))
#+end_src

** GN Mode

Major mode for gn (Generate Ninja) from https://github.com/lashtear/gn-mode.

#+begin_src emacs-lisp
(use-package gn-mode
  :ensure t
  :mode (("\\.gn\\'" . gn-mode)
         ("\\.gni\\'" . gn-mode)))
#+end_src

** YAML Mode

See https://github.com/yoshiki/yaml-mode.

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode (("\\.yml\\'" . yaml-mode)
         ("\\.yaml\\'" . yaml-mode)))
#+end_src
