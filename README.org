* Settings

** Key Definitions

#+BEGIN_SRC emacs-lisp
(setq akirabaruah/leader-key (kbd "SPC"))
#+END_SRC

** Files

*** Backup Files

Save backups of open files to /tmp (or equivalent) directory.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

*** Custom File

Put custom autogenerated settings in a separate file.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+END_SRC

*** Clean Up

Delete trailing whitespace on save.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** View

*** Column Numbers

Enable column numbers.
#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

*** Line Numbers

Enable line numbers. See https://www.emacswiki.org/emacs/LineNumbers.

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+END_SRC

* Packages

** General

Simplify key bindings.

#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup))
#+END_SRC

** Evil

Use Vim keybindings to avoid Repetitive Strain Injury (RSI).

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :demand t
  :requires general
  :general
  (:states '(normal visual emacs)
    "SPC" 'hydra-leader/body)
  :init
  (setq evil-want-C-i-jump nil)  ;; C-i is also <tab>; don't use it for evil.
  (setq evil-want-keybinding nil)  ;; Use evil-collection for bindings
                                   ;; in other packages.
  :config
  ;; For some reason, Magit's git-commit-mode defaults to emacs state
  ;; instead of normal or insert states. The following line ensures
  ;; that we start that mode with insert instead of emacs state. See
  ;; https://github.com/emacs-evil/evil/issues/1145 and
  ;; https://emacs.stackexchange.com/questions/14008/default-magit-commit-state-in-evil.
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
  (evil-mode))
#+END_SRC

*** Evil Collection

Common Evil keybindings for other modes. Don't initialize the whole
package here; instead setup various components within the requiring
~use-package~ definition. See
https://github.com/emacs-evil/evil-collection.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :requires evil
  :config
  (evil-collection-init 'buff-menu))
#+end_src

** Hydra

Hydras are configurable key command menus.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)
#+END_SRC

Enable ~:hydra~ keyword for ~use-package~. See
https://gitlab.com/to1ne/use-package-hydra.

#+BEGIN_SRC emacs-lisp
(use-package use-package-hydra
  :requires hydra)
#+END_SRC

** Doom Themes

Cool themes from https://github.com/hlissner/emacs-doom-themes.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+END_SRC

** Doom Modeline

See https://github.com/seagle0128/doom-modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** All the Icons

Nice fonts used by Doom packages. For example, see
https://github.com/jacktasia/beautiful-emacs/blob/master/init.org.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :if window-system
  :ensure t
  :config
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))
#+END_SRC

** YASnippet

Reusable text snippets. See https://github.com/joaotavora/yasnippet.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode))
#+END_SRC

Yasnippet doesn't include snippets out of the box, so include the
official package of pre-written snippets. See
https://github.com/AndreaCrotti/yasnippet-snippets.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :ensure t
  :requires yasnippet
  :config
  (yas-global-mode))
#+END_SRC

** Company

"COMPlete ANYthing" framework for text completion. See
https://company-mode.github.io/.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :requires evil-collection
  :init
  (setq company-idle-delay 0)
  :config
  (evil-collection-company-setup)
  (add-to-list 'company-backends 'company-ispell)
  (global-company-mode))
#+end_src

* Hydra Menus

Definitions for Hydra menus. Requires the ~hydra~ package installed above.

** Leader Menu

First, create a top-level menu launched by the leader key.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-leader (:color blue) "
Leader Hydra
"
  ("f" hydra-file/body "file")
  ("b" hydra-buffer/body "buffer")
  ("w" hydra-window/body "window")
  ("q" save-buffers-kill-emacs "quit emacs")
  ("SPC" nil "cancel"))
#+END_SRC

** File

Basic file navigation.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-file (:color blue :hint nil) "
File Hydra
"
  ("e" load-file "load elisp")
  ("f" find-file "find")
  ("s" save-buffer "save"))
#+END_SRC

** Buffer

Buffer manipulation.

#+begin_src emacs-lisp
(defhydra hydra-buffer (:color blue) "
Buffer Hydra
"
  ("b" switch-to-buffer "switch to buffer")
  ("SPC" nil "cancel"))
#+end_src

** Window

Window manipulation.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:hint nil) "
Window Hydra
^Movement^  ^Manipulation^
^--------^  ^------------^---------
_j_: down   _-_: split vertically
_k_: up     _/_: split horizontally
_h_: left   _c_: close window
_l_: right
"
  ("j" evil-window-down)
  ("k" evil-window-up)
  ("h" evil-window-left)
  ("l" evil-window-right)
  ("-" split-window-vertically)
  ("/" split-window-horizontally)
  ("c" delete-window)
  ("SPC" nil "cancel" :color blue))
#+END_SRC
